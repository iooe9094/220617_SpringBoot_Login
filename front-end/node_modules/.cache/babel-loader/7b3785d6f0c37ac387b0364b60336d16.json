{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport User from \"@/models/user\";\nexport default {\n  name: \"Register\",\n  // 변수 초기화\n  data: function data() {\n    return {\n      user: new User(\"\", \"\", \"\"),\n      submitted: false,\n      successful: false,\n      message: \"\" // 에러메세지 저장용\n\n    };\n  },\n  computed: {\n    loggedIn: function loggedIn() {\n      // 공유저장소의 user 객체의 속성인 loggedIn 값을 가져옴\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // 화면이 뜨자마자 실행되는 이벤트\n  mounted: function mounted() {\n    // 로그인 되어 있는 유저이면 /profile로 강제 페이지 이동\n    if (this.loggedIn) {\n      this.$router.push(\"/profile\");\n    }\n  },\n  methods: {\n    // 회원 가입 메소드\n    handleRegister: function handleRegister() {\n      var _this = this;\n\n      this.message = \"\";\n      this.submitted = true; // 회원가입 버튼 클릭 시\n      // 유효성 체크 로직 실행 (Vee-Validate 이용)\n      // $validator.validate() 입력양식 유효성 체크가 통과하면\n      // isValid = true\n\n      this.$validator.validate().then(function (isValid) {\n        // isValid = true일 때만 아래 실행\n        if (isValid) {\n          if (isValid) {\n            // springboot 서버 통신 : 공유저장소의 비동기 메소드 호출(register)\n            _this.$store.dispatch(\"auth/register\", _this.user) // 성공 / 실패 then\n            // 성공하면 첫 번째 매개변수 실행\n            // 실패하면 두 번째 매개변수 실행\n            .then(function (data) {\n              // response == data (서버 쪽 응답 메세지(객체))\n              _this.message = data.message;\n              _this.successful = true; // 강제 페이지 전환 (해도 안해도 상관 없음)\n              //   this.$router.push(\"/login\");\n            }, // 실패\n            function (error) {\n              _this.message = error.message || error.toString();\n              _this.successful = false;\n            });\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;AAEA;EACAA,gBADA;EAEA;EACAC,IAHA,kBAGA;IACA;MACAC,0BADA;MAEAC,gBAFA;MAGAC,iBAHA;MAIAC,WAJA,CAIA;;IAJA;EAMA,CAVA;EAWAC;IACAC,QADA,sBACA;MACA;MACA;IACA;EAJA,CAXA;EAiBA;EACAC,OAlBA,qBAkBA;IACA;IACA;MACA;IACA;EACA,CAvBA;EAwBAC;IACA;IACAC,cAFA,4BAEA;MAAA;;MACA;MACA,sBAFA,CAEA;MACA;MACA;MACA;;MACA;QACA;QACA;UACA;YACA;YACA,aACAC,QADA,CACA,eADA,EACA,UADA,EAEA;YACA;YACA;YAJA,CAKAC,IALA,CAMA;cACA;cACA;cACA,wBAHA,CAIA;cACA;YACA,CAZA,EAaA;YACA;cACA;cACA;YACA,CAjBA;UAmBA;QACA;MACA,CA1BA;IA2BA;EAnCA;AAxBA","names":["name","data","user","submitted","successful","message","computed","loggedIn","mounted","methods","handleRegister","dispatch","then"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\n  <div class=\"col-md-12\">\n    <div class=\"card card-container\">\n      <img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />\n      <form name=\"form\" @submit.prevent=\"handleRegister\">\n        <!-- successful: false면 회원가입 버튼을 클릭 안한 상태 -->\n        <!-- successful: false면 회원가입 중 에러발생 상태 -->\n        <div v-if=\"!successful\">\n          <!-- 유저명 입력 양식 -->\n          <div class=\"form-group\">\n            <label for=\"username\">Username</label>\n            <input\n              v-model=\"user.username\"\n              v-validate=\"'required|min:3|max:20'\"\n              type=\"text\"\n              class=\"form-control\"\n              name=\"username\"\n            />\n            <!-- submitted 버튼을 누르고 && 유효성 에러가 발생했을 경우 아래 내용이 보임 -->\n            <div\n              v-if=\"errors.has('username') && submitted\"\n              class=\"alert-danger\"\n            >\n              {{ errors.first(\"username\") }}\n            </div>\n          </div>\n        </div>\n\n        <!-- email 입력양식 -->\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input\n            v-model=\"user.email\"\n            v-validate=\"'required|max:50'\"\n            type=\"text\"\n            class=\"form-control\"\n            name=\"email\"\n          />\n          <!-- submitted 버튼을 누르고 && 유효성 에러가 발생했을 경우 아래 내용이 보임 -->\n          <div v-if=\"errors.has('email') && submitted\" class=\"alert-danger\">\n            {{ errors.first(\"email\") }}\n          </div>\n        </div>\n\n        <!-- Password 입력양식 -->\n        <div class=\"form-group\">\n          <label for=\"password\">Password</label>\n          <input\n            v-model=\"user.password\"\n            v-validate=\"'required|min:6|max:40'\"\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n          />\n          <!-- submitted 버튼을 누르고 && 유효성 에러가 발생했을 경우 아래 내용이 보임 -->\n          <div v-if=\"errors.has('password') && submitted\" class=\"alert-danger\">\n            {{ errors.first(\"password\") }}\n          </div>\n        </div>\n\n        <!-- submit 버튼 -->\n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block\">Sign up</button>\n        </div>\n      </form>\n\n      <!-- 화면에 에러 메세지 출력 -->\n      <div\n        v-if=\"message\"\n        class=\"alert\"\n        :class=\"successful ? 'alert-success' : 'alert-danger'\"\n      >\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport User from \"@/models/user\";\n\nexport default {\n  name: \"Register\",\n  // 변수 초기화\n  data() {\n    return {\n      user: new User(\"\", \"\", \"\"),\n      submitted: false,\n      successful: false,\n      message: \"\", // 에러메세지 저장용\n    };\n  },\n  computed: {\n    loggedIn() {\n      // 공유저장소의 user 객체의 속성인 loggedIn 값을 가져옴\n      return this.$store.state.auth.status.loggedIn;\n    },\n  },\n  // 화면이 뜨자마자 실행되는 이벤트\n  mounted() {\n    // 로그인 되어 있는 유저이면 /profile로 강제 페이지 이동\n    if (this.loggedIn) {\n      this.$router.push(\"/profile\");\n    }\n  },\n  methods: {\n    // 회원 가입 메소드\n    handleRegister() {\n      this.message = \"\";\n      this.submitted = true; // 회원가입 버튼 클릭 시\n      // 유효성 체크 로직 실행 (Vee-Validate 이용)\n      // $validator.validate() 입력양식 유효성 체크가 통과하면\n      // isValid = true\n      this.$validator.validate().then((isValid) => {\n        // isValid = true일 때만 아래 실행\n        if (isValid) {\n          if (isValid) {\n            // springboot 서버 통신 : 공유저장소의 비동기 메소드 호출(register)\n            this.$store\n              .dispatch(\"auth/register\", this.user)\n              // 성공 / 실패 then\n              // 성공하면 첫 번째 매개변수 실행\n              // 실패하면 두 번째 매개변수 실행\n              .then(\n                (data) => {\n                  // response == data (서버 쪽 응답 메세지(객체))\n                  this.message = data.message;\n                  this.successful = true;\n                  // 강제 페이지 전환 (해도 안해도 상관 없음)\n                  //   this.$router.push(\"/login\");\n                },\n                // 실패\n                (error) => {\n                  this.message = error.message || error.toString();\n                  this.successful = false;\n                }\n              );\n          }\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style>\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.card-container.card {\n  max-width: 350px !important;\n  padding: 40px 40px;\n}\n\n.card {\n  background-color: #f7f7f7;\n  padding: 20px 25px 30px;\n  margin: 0 auto 25px;\n  margin-top: 50px;\n  -moz-border-radius: 2px;\n  -webkit-border-radius: 2px;\n  border-radius: 2px;\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n}\n\n.profile-img-card {\n  width: 96px;\n  height: 96px;\n  margin: 0 auto 10px;\n  display: block;\n  -moz-border-radius: 50%;\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}